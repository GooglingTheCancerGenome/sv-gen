import random

shell.executable("/bin/bash")

__author__ = 'Luca Santuari'
__version__ = '1.0.0'
__license__ = 'Apache License, Version 2.0'

#FASTA with SVs
#SVFASTA = '/Users/lsantuari/Documents/Local_GitHub/sv-gen-workflow/merged_sv_mut.fasta'

#FASTA without SVs
#NORMALFASTA = '/Users/lsantuari/Documents/Local_GitHub/sv-gen-workflow/merged_chr17_human.fasta'
REFERENCE = '/Users/tschafers/GCGC/reference/chr17_human.fasta'
NORMALFASTA = '/Users/tschafers/GCGC/output/chr17_human_merged.fasta'
SVFASTA = '/Users/tschafers/GCGC/output/chr17_human_SV_merged.fasta'
SV_TEMPLATE = '/Users/tschafers/Temp/sv-gen-workflow/test/sv_test_template'



#Coverage
#FOLD_COV = 1 #1 for testing
#REFERENCE = '/Users/lsantuari/Documents/Data/HPC/DeepSV/Artificial_data/SURVIVOR-master/Debug/chr17_human.fasta'
#Tools
#Requirements:
# - SURVIVOR v2
# - ART: ART-bin-MountRainier-2016.06.05-MacOS64.tgz
# - SPEEDSEQ
#SURVIVOR= '/Users/lsantuari/Applications/ReadSimulation/SURVIVOR/Debug/SURVIVOR'
#ART = '/Users/lsantuari/Applications/ReadSimulation/art_bin_MountRainier/art_illumina'
#SPEEDSEQ = '/Users/lsantuari/Applications/ReadSimulation/speedseq/bin/speedseq'

#Random seed
SEED = random.randint(1, 10**3)
#print('Using random seed = %d'% SEED)

#helper functions
def get_genome(sample):
    if sample[0] == 'G' or sample[0] == 'T':
        return SVFASTA
    elif sample[0] == 'N':
        return NORMALFASTA

def get_coverage(sample):
    cov = 15
    if sample == 'T0' or sample == 'N0':
        # Test coverage
        return cov
    else:
        # Test coverage
        return cov*2

#Rules
'''
rule all:
  input:
      expand('{sample}/BAM/{sample}.bam',
             sample=config['SAMPLES']),
      'T1/MERGED/T1.bam.bai'
'''
rule all:
    input:
        '/Users/tschafers/GCGC/output/chr17_human_merged.fasta.fai',
        '/Users/tschafers/GCGC/output/chr17_human_merged.fasta',
        'sv_template',
        'chr17_SV_N.vcf',
        'chr17_SV_N.bed',
        'chr17_SV_N.insertions.fa',
        'chr17_SV_N.fasta',
        '/Users/tschafers/GCGC/output/chr17_human_SV_merged.fasta'

rule cat_hap:
    input:
        genome = {REFERENCE}
    output:
        merge = {NORMALFASTA}
    shell:
        'cat {input.genome} {input.genome} > {output}'

rule fasta_index:
    input:
        rules.cat_hap.output.merge
    output:
        index = '/Users/tschafers/GCGC/output/chr17_human_merged.fasta.fai'
    shell:
        'samtools faidx {input}'

rule configsv:
    input:
        rules.fasta_index.output
    params:
        run_mode = 'ind',
        sv_param = '2/8/10'
    output:
        'sv_template'
    shell:
        '../tools/configSURVIVOR.py --RUNMODE {params.run_mode} --SURVPARAM {params.sv_param}'

rule SURVIVOR_simSV:
    input:
        template = rules.configsv.output,
        ref = '/Users/tschafers/GCGC/reference/chr17_human.fasta'
    params:
        snp_freq = 0,
        read_mode = 0,
        out_prefix = 'chr17_SV_N'
    output:
        vcf = 'chr17_SV_N.vcf',
        bed = 'chr17_SV_N.bed',
        ins = 'chr17_SV_N.insertions.fa',
        fasta = 'chr17_SV_N.fasta'

    shell:
        'SURVIVOR simSV {input.ref} {input.template} {params.snp_freq} {params.read_mode} {params.out_prefix}'


rule cat_hap_sv:
    input:
        genome = {REFERENCE},
        sv_out = rules.SURVIVOR_simSV.output.fasta
    output:
        merge = {SVFASTA}
    shell:
        'cat {input.genome} {input.sv_out} > {output}'


rule fastaSV_index:
    input:
        rules.cat_hap_sv.output.merge
    output:
        index = '/Users/tschafers/GCGC/output/chr17_human_SV_merged.fasta.fai'
    shell:
        'samtools faidx {input}'




'''
rule sim_reads:
    input:
        genome = lambda wildcards: get_genome(wildcards.sample)
    params:
        isize = 350,
        fold_cov = lambda wildcards: get_coverage(wildcards.sample),
        dir = '{sample}/FASTQ/{sample}_'
    output:
        first = '{sample}/FASTQ/{sample}_1.fq',
        second = '{sample}/FASTQ/{sample}_2.fq'
    shell:
        '{ART} \
        -ss HSXt \
        -M \
        -i {input.genome} \
        -p \
        -l 150 \
        -f {params.fold_cov} \
        -m {params.isize} \
        -s 100 \
        -na \
        -rs {SEED} \
        -o {params.dir}'

rule rename:
    input:
        first = '{sample}/FASTQ/{sample}_1.fq', \
        second = '{sample}/FASTQ/{sample}_2.fq'
    output:
        first = '{sample}/FASTQ/{sample}_F1_S1_L001_R1_001.fq', \
        second = '{sample}/FASTQ/{sample}_F1_S1_L001_R2_001.fq'
    shell:
            'mv {input.first} {output.first}; mv {input.second} {output.second}'

rule gzip:
    input:
        first = rules.rename.output.first, second = rules.rename.output.second
    output:
        first = rules.rename.output.first+'.gz', second = rules.rename.output.second+'.gz'
    shell:
            'gzip {input.first}; gzip {input.second}'

rule mapping:
    input:
        fq1 = rules.gzip.output.first,
        fq2 = rules.gzip.output.second
    params:
        rg = "@RG\tID:{wildcards.sample}\tSM:{wildcards.sample}\tLB:{wildcards.sample}"
    output:
        '{sample}/BAM/{sample}.bam'
    shell:
        '{SPEEDSEQ} align \
            -o {wildcards.sample}/BAM/{wildcards.sample} \
            -R {params.rg} \
            {REFERENCE} \
            {input.fq1} \
            {input.fq2}'

rule merge_bams:
    input:
        'T0/BAM/T0.bam',
        'N0/BAM/N0.bam'
    output:
        'T1/MERGED/T1.bam'
    shell:
        'sambamba merge {output} {input}'

rule index_bams:
    input:
        'T1/MERGED/T1.bam'
    output:
        'T1/MERGED/T1.bam.bai'
    shell:
        'sambamba index {input}'
'''

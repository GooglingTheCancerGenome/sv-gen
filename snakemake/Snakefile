import random

shell.executable("/bin/bash")
configfile: "analysis.yaml"

__author__ = ['Luca Santuari', 'Arnold Kuzniar']
__version__ = '0.1.0'
__license__ = 'Apache License, Version 2.0'


REFERENCE = config['input']
NORMALFASTA = config['output']['diploid']
SVFASTA = config['output']['diploid_sv']
SEED = random.randint(1, 10**3)

#helper functions
def get_genome(sample):
    if sample[0] == 'G' or sample[0] == 'T':
        return SVFASTA
    elif sample[0] == 'N':
        return NORMALFASTA

def get_coverage(sample, cov):
    if sample == 'T0' or sample == 'N0':
        # Test coverage
        return cov
    else:
        # Test coverage
        return str(int(cov)*2)

#Rules

rule all:
  input:
      expand('{sample}/BAM/{sample}_{coverage}_{insert_size}.bam',
             sample=config['SAMPLES'],
             coverage=config['coverage'],
             insert_size=config['insert_size']),
      expand('T1/MERGED/T1_{coverage}_{insert_size}.bam.bai',
             coverage=config['coverage'],
             insert_size=config['insert_size'])

rule survivor_config:
    output:
        "parameter_file"
    conda:
        "environment.yaml"
    shell:
        """
        set -xe
        SURVIVOR simSV "{output}""
        """

rule survivor_simsv:
    input:
        param = survivor_config.output,
        fasta = config['input']
    output: config['output']['diploid_sv']
    conda:
        "environment.yaml"
    shell:
        """
        set -xe
        OUTFILE="$(basename "{output}" .fasta)"
        SURVIVOR simSV "{input.fasta}" "{input.param}" 0 0 "${{OUTFILE}}"
        """

rule sim_reads:
    input:
        genome = lambda wildcards: get_genome(wildcards.sample)
    params:
        isize = lambda wildcards: wildcards.insert_size,
        fold_cov = lambda wildcards: get_coverage(wildcards.sample, wildcards.coverage),
        dir = '{sample}/FASTQ/{sample}_{coverage}_{insert_size}_'
    output:
        first = '{sample}/FASTQ/{sample}_{coverage}_{insert_size}_1.fq',
        second = '{sample}/FASTQ/{sample}_{coverage}_{insert_size}_2.fq'
    conda:
        "environment.yaml"
    shell:
        """
        set -xe
        art_illumina \
            -ss HSXt \
            -M \
            -i {input.genome} \
            -p \
            -l 150 \
            -f {params.fold_cov} \
            -m {params.isize} \
            -s 100 \
            -na \
            -rs {SEED} \
            -o {params.dir}
        """

rule rename:
    input:
        first = '{sample}/FASTQ/{sample}_{coverage}_{insert_size}_1.fq',
        second = '{sample}/FASTQ/{sample}_{coverage}_{insert_size}_2.fq'
    output:
        first = '{sample}/FASTQ/{sample}_{coverage}_{insert_size}_F1_S1_L001_R1_001.fq',
        second = '{sample}/FASTQ/{sample}_{coverage}_{insert_size}_F1_S1_L001_R2_001.fq'
    shell:
        """
        set -xe
        mv {input.first} {output.first}
        mv {input.second} {output.second}
        """

rule gzip:
    input:
        first = rules.rename.output.first,
        second = rules.rename.output.second
    output:
        first = rules.rename.output.first+'.gz',
        second = rules.rename.output.second+'.gz'
    shell:
        """
        set -xe
        gzip {input.first} {input.second}
        """

rule mapping:
    input:
        fq1 = rules.gzip.output.first,
        fq2 = rules.gzip.output.second
    params:
        rg = "@RG\tID:{wildcards.sample}\tSM:{wildcards.sample}\tLB:{wildcards.sample}"
    output:
        '{sample}/BAM/{sample}_{coverage}_{insert_size}.bam'
    shell:
        '{SPEEDSEQ} align \
            -o {wildcards.sample}/BAM/{wildcards.sample} \
            -R {params.rg} \
            {REFERENCE} \
            {input.fq1} \
            {input.fq2}'

rule merge_bams:
    input:
        'T0/BAM/T0_{coverage}_{insert_size}.bam',
        'N0/BAM/N0_{coverage}_{insert_size}.bam'
    output:
        'T1/MERGED/T1_{coverage}_{insert_size}.bam'
    conda:
        "environment.yaml"
    shell:
        'sambamba merge {output} {input}'

rule index_bams:
    input:
        'T1/MERGED/T1_{coverage}_{insert_size}.bam'
    output:
        'T1/MERGED/T1_{coverage}_{insert_size}.bam.bai'
    conda:
        "environment.yaml"
    shell:
        'sambamba index {input}'
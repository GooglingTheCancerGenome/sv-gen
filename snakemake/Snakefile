import random

shell.executable("/bin/bash")

__author__ = 'Luca Santuari'
__version__ = '1.0.0'
__license__ = 'Apache License, Version 2.0'


#FASTA with SVs
SVFASTA = '/Users/lsantuari/Documents/Local_GitHub/sv-gen-workflow/merged_sv_mut.fasta'
#FASTA without SVs
NORMALFASTA = '/Users/lsantuari/Documents/Local_GitHub/sv-gen-workflow/merged_chr17_human.fasta'
#Coverage
FOLD_COV = 1 #1 for testing
REFERENCE = '/Users/lsantuari/Documents/Data/HPC/DeepSV/Artificial_data/SURVIVOR-master/Debug/chr17_human.fasta'

#Tools
#Requirements:
# - SURVIVOR v2
# - ART: ART-bin-MountRainier-2016.06.05-MacOS64.tgz
# - SPEEDSEQ
SURVIVOR= '/Users/lsantuari/Applications/ReadSimulation/SURVIVOR/Debug/SURVIVOR'
ART = '/Users/lsantuari/Applications/ReadSimulation/art_bin_MountRainier/art_illumina'
SPEEDSEQ = '/Users/lsantuari/Applications/ReadSimulation/speedseq/bin/speedseq'

SAMPLES=['G1', 'G2', 'N1', 'N2']

#Random seed
SEED = random.randint(1, 1000)
#print('Using random seed = %d'% SEED)

#helper functions
def get_genome(sample):
    if sample[0] == 'G' or sample[0] == 'T':
        return SVFASTA
    elif sample[0] == 'N':
        return NORMALFASTA

def get_coverage(sample):
    if sample == 'T0' or sample == 'N0':
        # Test coverage
        return 1
    else:
        # Test coverage
        return 2

#Rules

rule all:
  input:
      expand('{sample}/BAM/{sample}.bam', sample=SAMPLES),
      'T1/MERGED/T1.bam.bai'

rule sim_reads:
    input:
        genome = lambda wildcards: get_genome(wildcards.sample)
    params:
        fold_cov = lambda wildcards: get_coverage(wildcards.sample),
        dir = '{sample}/FASTQ/{sample}_'
    output:
        first = '{sample}/FASTQ/{sample}_1.fq',
        second = '{sample}/FASTQ/{sample}_2.fq'
    shell:
        '{ART} \
        -ss HSXt \
        -M \
        -i {input.genome} \
        -p \
        -l 150 \
        -f {params.fold_cov} \
        -m 350 \
        -s 100 \
        -na \
        -rs {SEED} \
        -o {params.dir}'

rule rename:
    input:
        first = '{sample}/FASTQ/{sample}_1.fq', \
        second = '{sample}/FASTQ/{sample}_2.fq'
    output:
        first = '{sample}/FASTQ/{sample}_F1_S1_L001_R1_001.fq', \
        second = '{sample}/FASTQ/{sample}_F1_S1_L001_R2_001.fq'
    shell:
            'mv {input.first} {output.first}; mv {input.second} {output.second}'

rule gzip:
    input:
        first = rules.rename.output.first, second = rules.rename.output.second
    output:
        first = rules.rename.output.first+'.gz', second = rules.rename.output.second+'.gz'
    shell:
            'gzip {input.first}; gzip {input.second}'

rule mapping:
    input:
        fq1 = rules.gzip.output.first,
        fq2 = rules.gzip.output.second
    params:
        rg = "@RG\tID:{wildcards.sample}\tSM:{wildcards.sample}\tLB:{wildcards.sample}"
    output:
        '{sample}/BAM/{sample}.bam'
    shell:
        '{SPEEDSEQ} align \
            -o {wildcards.sample}/BAM/{wildcards.sample} \
            -R {params.rg} \
            {REFERENCE} \
            {input.fq1} \
            {input.fq2}'

rule merge_bams:
    input:
        'T0/BAM/T0.bam',
        'N0/BAM/N0.bam'
    output:
        'T1/MERGED/T1.bam'
    shell:
        'sambamba merge {output} {input}'

rule index_bams:
    input:
        'T1/MERGED/T1.bam'
    output:
        'T1/MERGED/T1.bam.bai'
    shell:
        'sambamba index {input}'